Example Erlang module:
#+BEGIN_SRC erlang :tangle example.erl
-module(example).
-export([add_two/1]).
add_two(X) -> X + 2.
#+END_SRC

Compile the =example= module to Core Erlang:
#+BEGIN_SRC sh
erlc +to_core example.erl
#+END_SRC

Haskell program to parse and pretty print =example.core=:
#+BEGIN_SRC haskell :tangle example.hs
module Main where

import           Language.CoreErlang.Parser (parseModule)
import           Language.CoreErlang.Pretty (prettyPrint)

main :: IO ()
main = do
  str <- readFile "example.core"
  case parseModule str of
    Left  err    -> print err
    Right parsed -> putStrLn (prettyPrint parsed)
#+END_SRC

Parse =example.core= and pretty print it to =example.pretty=:
#+BEGIN_SRC sh
stack runhaskell example.hs > example.pretty
#+END_SRC

Diff the result with the ~erlc~-generated version.
#+BEGIN_SRC sh
diff example.core example.pretty
#+END_SRC
